#+TITLE: Kubernetes
#+AUTHOR: Elliot Penson

#+ATTR_HTML: :width 100 :align right
[[file:../images/kubernetes-logo.svg]]

#+BEGIN_QUOTE
"*Kubernetes* (K8s) is an open-source system for automating deployment, scaling,
and management of containerized applications." ~ kubernetes.io
#+END_QUOTE

Kubernetes features include automatic bin packing, self-healing, horizontal
scaling, service discovery, load balancing, rollouts/rollbacks, secret and
configuration management, storage orchestration, and batch execution.

*Subpages*: [[file:kubectl.org][kubectl]], [[file:kubernetes-objects.org][objects]].

* Resources

  Information on this page comes (often directly) from the following resources.

  | Topic         | Resource                                   |
  |---------------+--------------------------------------------|
  | Big Picture   | [[https://www.youtube.com/watch?v=tsk0pWf4ipw][Brendan Burns at Google I/O]]                |
  | Basics        | Kubernetes [[https://github.com/kubernetes/kubernetes/tree/release-1.1/docs/user-guide/walkthrough][101]], [[https://github.com/kubernetes/kubernetes/blob/release-1.1/docs/user-guide/walkthrough/k8s201.md][201]], [[https://kubernetes.io/docs/home/][documentation]]         |
  | Practice      | [[https://github.com/kelseyhightower/kubernetes-the-hard-way][Kubernetes the Hard Way]]                    |
  | Deep Dive     | Linux Foundation Training ([[https://training.linuxfoundation.org/training/introduction-to-kubernetes/][LFS158]], [[https://training.linuxfoundation.org/training/kubernetes-for-developers/][LFD259]]) |
  | Certification | [[https://training.linuxfoundation.org/certification/certified-kubernetes-application-developer-ckad/][CKAD]]                                       |

* Overview

  #+ATTR_HTML: :width 250px :align left
  [[file:../images/google-cluster.svg]]

  [[file:containers.org][Containers]] are great. /Everything/ at Google runs in a container. To manage
  these containers, Google developed a cluster management system (*Borg*). The
  system has four basic parts.

  The *Base OS* and *Container Manager* constitute a container optimized VM
  image with monitoring, logging, restart, etc. Users configure these images
  with a declarative manifest file.

  The *Cluster Scheduler* distrubutes work across machines with replication,
  resizing, and service naming/discovery. Often containers have very different
  resource requirements and quality of service quarantees. For example, a web
  server might need very low latency and require higher quality of service than
  a background batch process. The scheduler efficiently handles these
  differences.

  *Kubernetes* is an open source project that makes these internal Google
  concepts available to the world. Kubernetes provides the scheduler (master)
  and the container manager.

  When scheduling becomes easy, people quickly find themselves with hundereds of
  pods. Kubernetes provides [[file:kubernetes-objects.org::Labels][*labels*]] where pods can be organized and queried
  declaratively. One no longer has to worry about particular machines; the
  cluster becomes one resource which runs containers. This is a powerful
  abstraction. People also want to replicate containers. Kubernetes gives the
  *service* abstraction which provides a named load balancer over a label query.

* Architecture

  [[file:../images/kubernetes-architecture.png]]

  Image taken from [[https://kubernetes.io/docs/concepts/overview/components][kubernetes.io]].

** Master

   The *master* node provides the cluster's *control plane*. Master components
   make global decisions about the cluster (e.g. scheduling) and detect and
   respond to cluster events. Users communicate with the cluster through the
   master node.

   In High-Availability (HA) mode, master node replicas are added to the
   cluster. While only one of the master node replicas actively manages the
   cluster, the control plane components stay in sync across the master node
   replicas.

** etcd

   Kubernetes saves configuration data and cluster state to *etcd*. This
   distributed key-value store lives on the master node (*stacked*) or on a
   dedicated host (*external*). Data is persistent; new information is only
   appended.

** kube-apiserver

   *kube-apiserver* is a master component that processes REST calls from users
   and reads/saves state information to etcd. *kube-apiserver* is the only
   component that communicates with etcd.

** kube-scheduler

   *kube-scheduler* is a master component that assigns new objects, such as
   pods, to nodes. The scheduler makes decisions based on the current cluster
   state and new object requirements.

** Controller Managers

   *Controller managers* are control plane components that regulate and respond
   to the state of the Kubernetes cluster. Controllers are watch-loops which
   compare the cluster's desired state with the current
   state. *kube-controller-manager* includes a number of controllers that manage
   nodes, replication, endpoints, and tokens. *cloud-controller-manager* runs
   controllers that interact with the underlying infrastructure of a cloud
   provider.

** Worker

   A *worker* node provides a running environment for client applications. Pods
   are scheduled on worker nodes. The worker node has a container runtime,
   kublet, and kube-proxy. Each node may also have addons for DNS, dashboarding,
   monitoring, and logging.

** Container Runtime

   A container runtime runs containers. Kubernetes supports several container
   runtimes including Docker, containerd, rkt, and more.

** Kubelet

   A *kubelet* is an agent that runs on each node in the cluster. The kubelet
   recieves Pod definitions from the master and interacts with the container
   runtime. The kubelet connects to the container runtime using the *Container
   Runtime Interface (CRI)*: kubelet as the gRPC client, CRI as the gRPC
   server. The kubelet also monitors the health of the Pod's running
   containers. *dockershim* enables CRI on Docker containers.

** kube-proxy

   *kube-proxy* is a network proxy that runs on each node in the cluster.
   *kube-proxy* maintains network rules on nodes and is responsible for routing
   *network traffic to load-balanced services in the cluster.

* Networking

  A container orchestrator has four distinct networking challenges.

  - Container-to-container communication inside pods.
    - Kubernetes uses the operating system's *network namespace*. All containers
      inside a pod are able to communicate via localhost.
  - Pod-to-pod communication on the same node and across cluster nodes.
    - Kubernetes has an *IP-per-Pod* model.
  - Pod-to-service communication within and across namespaces.
  - External-to-service commuincation for clients to access applications.
    - Applications are available externally over a virtual IP encapsulated by a
      service.

* Objects

  The Kubernetes object model include fundamental building blocks such as
  *Pods*, *ReplicaSets*, *Deployments*, *Namespaces*, etc. See [[file:kubernetes-objects.org][Kubernetes
  Objects]] for more information.

* Health Checking

  Health checking may appear at the process level or the application
  level. Process health checks (default) are a simple check by the Docker
  daemon. Application health checks may be required to detect issues such as
  deadlock. Kubernetes supports three types of user implemented health-checks:
  HTTP, command execution, and TCP socket. Configure health checks in the
  ~livenessProbe~ section of your container.

* API

  Kubernetes provides an API server (~kube-apiserver~). The HTTP API space can
  be divided into three groups.

  - Core Group (~/api/v1~)
    - Include objects such as Pods, Services, nodes, etc.
  - Named Group (~/apis/$NAME/$VERSION~)
    - Different versions (e.g. ~alpha~, ~beta~) imply different levels of
      support.
  - System-Wide
    - Endpoints include ~/healthz~, ~/logs~, ~/metrics~, and others.

  The API may be access directly or through [[file:kubernetes-cli.org][the CLI]].

* Authentication

  Each Kubernetes access request goes through three stages: *authentication*,
  *authorization*, and *admission control*.

  Authentication logs in the user. Kubernetes does not store users or
  usernames. Users may be *normal users* (those managed outside the cluster) or
  *service acconts* (in-cluster users). Service accounts are tied to a given
  namespace and communicate with secrets. Kubernetes uses client certificates,
  bearer tokens, an authenticating proxy, or HTTP basic auth to authenticate API
  requests through authentication plugins.

* Authorization

  After successful authentication, a request needs to be authorized. Kubernetes
  may compare a number of request attributes (e.g. user, group, extra, resource,
  namespace) against policies. Like authentication, authorization supports
  multiple modules/authorizers including [[https://kubernetes.io/docs/reference/access-authn-authz/node/][node authorization]], [[https://kubernetes.io/docs/reference/access-authn-authz/abac/][ABAC]], [[https://kubernetes.io/docs/reference/access-authn-authz/webhook/][webhook]], and
  [[https://kubernetes.io/docs/reference/access-authn-authz/rbac/][RBAC]].

* Admission Control

  Admission control is used to specify granular access control policies
  (e.g. privileged containers, resource quota limits). These policies are
  enforced with admission controllers like ResourceQuota, DefaultStorageClass,
  AlwaysPullImages, etc. These controllers only come into effect after API
  requests are authenticated and authorized.
