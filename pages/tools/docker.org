#+TITLE: Docker
#+AUTHOR: Elliot Penson

Docker is a platform for development and deployment with [[file:containers.org][containers]]. Docker
images have been standardized by the Open Container Initiative to the OCI image
format.

Information on this page is taken from Docker's [[https://docs.docker.com/get-started/][getting started guide]] and
chapter 2 of /Kubernetes: Up & Running/.

* Concepts

  An *image* is an executable package that includes everything needed to run an
  application - the code, a runtime, libraries, environment variables, and
  configuration files. A *container* is a runtime instance of an image - what
  the image becomes in memory when executed (a process).

  Docker images are made up of a series of filesystem layers (an *overlay*
  filesystem). Each layer adds, removes, or modifies files from the preceding
  layer in the filesystem. For example, container /A/ may be OS only, container
  /B/ adds Ruby, and container /C/ adds Golang.

* CLI

  #+BEGIN_SRC sh
    docker run <image>           # Run an image.
    docker run -d <image>        # Run in background with detached mode
    docker run -p 80:80 <image>  # Map published port to the host

    docker stop <container>      # Send SIGTERM, then SIGKILL
    docker kill <container>      # Send SIGKILL
    docker rm <container>        # Remove a container

    docker ps                    # List running containers
    docker ps -a                 # List running and stopped containers

    docker exec <container> <command>     # Execute a command
    docker exec -d <container> <command>  # Run in background
    docker exec -it <container> bash      # Start interactive shell
  #+END_SRC

* ~Dockerfile~

  A ~Dockerfile~ defines a Docker image. An example appears below. Build the
  Docker image with ~docker build .~. The ~-t~ (tag) argument is often used to
  name the image.

  #+BEGIN_SRC dockerfile
    # Define a parent image.
    FROM python:3.6-slim

    # Set the working directory in the container image.
    WORKDIR /app

    COPY requirements.txt ./
    RUN pip install -r requirements.txt  # executes in the container.

    # Copy all program files to the container.
    COPY . .

    # Make ports available externally to the container.
    EXPOSE 80

    # Define environment variables.
    ENV NAME World

    # Run commands on launch.
    CMD ["python", "app.py"]
  #+END_SRC

  In general, you want to order your layers from least likely to change to most
  likely to change in order to optimize the image size for pushing and
  pulling. This is why, above, we copy ~requirements.txt~ and install
  dependencies before copying the rest of the program files.

  Handy trick: use a ~.dockerignore~ file to define a set of files that should
  be ignored when copying to the image.

* Registries

  A *registry* is a collection of repositories, and a repository is a collection
  of images. A raw ~docker build~ will place an image on your machine's local
  registry. Publish images to an external registry by logging in (~docker
  login~) and running ~docker push <image>~. See all downloaded images with
  ~docker image ls~.
 
  Images can be tagged with ~docker tag <image> <name>~. Associate a local image
  with a repository on a registry with the notation
  ~username/repository:tag~. For example, ~docker tag example
  elliot/experiments:1.0~.
