#+TITLE: Bash
#+AUTHOR: Elliot Penson

Bash (Bourne Again SHell) is a command language and Unix shell. Bash is a
superset of Bourne shell (~sh~): commands that work in ~sh~, also work in
~bash~.

* When to Use Bash

  The [[https://google.github.io/styleguide/shell.xml][Google Shell Style Guide]] gives advice on when to use shell.

  #+BEGIN_QUOTE
  Shell should only be used for small utilities or simple wrapper scripts.

  - If you're mostly calling other utilities and are doing relatively little data
    manipulation, shell is an acceptable choice for the task.
  - If you are writing a script that is more than 100 lines long, you should
    probably be writing it in Python instead.
  #+END_QUOTE

* Variables

  #+BEGIN_SRC bash
    # Use uppercase for constants.
    NAME="Elliot"
    echo "Hi, ${NAME}"

    # Use snake_case for variables.
    count=0
    (( count++ ))
    echo ${count}
  #+END_SRC

  Prefer ~${var}~ over ~$var~ for variable expansion.

* Functions

  #+BEGIN_SRC bash
    # Use snake_case for function names.
    greet() {
        # Declare function-specific variables with 'local'.
        local name="$1"
        echo "Hello, ${name}"
    }

    greet "Elliot"
  #+END_SRC

** Arguments

   Use *special parameters* to access parameters given to the function.

   | ~$#~ | Number of arguments |
   | ~$@~ | All arguments       |
   | ~$1~ | First argument      |
   | ~$2~ | Second argument     |

* Control Flow

  #+BEGIN_SRC bash
    if [[ expression ]]; then
        ...
    else
        ...
    fi
  #+END_SRC

** Conditionals

   | ~[[ NUM -eq NUM ]]~      | Numbers equal    |
   | ~[[ STRING == STRING ]]~ | Strings equal    |
   | ~[[ ! EXPR ]]~           | Not              |
   | ~[[ X ]] && [[ Y ]]~         | And              |
   | ~[[ X ]] ❘❘ [[ Y ]]~         | Or               |
   | ~[[ -z STRING ]]~        | Empty string     |
   | ~[[ -e FILE ]]~          | File exists      |
   | ~[[ -d FILE ]]~          | Directory exists |

* Loops

  #+BEGIN_SRC bash
    for i in {1..5}; do
        ...
    done
  #+END_SRC

* Command Substitution

  Command substitution is used to insert the output of one command into a second
  command.

  #+BEGIN_SRC bash
    today=$(date)
    echo "${today}"
  #+END_SRC

* Style

  Start each file with a [[file:../tools/shebang.org][shebang]] and a description the contents.

  #+BEGIN_SRC bash
    #!/bin/bash
    #
    # Display an example.
  #+END_SRC

  Executables (~chmod +x file~) should have no extension.
