#+TITLE: Java
#+AUTHOR: Elliot Penson

*Java* is an object-oriented, statically-typed language developed by Sun
Microsystems. Programmers compile Java to bytecode that's executed by the *Java
Virtual Machine* (JVM).

* Hello World

  Place the following code in a file called ~Main.java~.

  #+BEGIN_SRC java
    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello, world.");
        }
    }
  #+END_SRC

  Compile and execute with the following commands.

  #+BEGIN_SRC sh
    javac Main.java
    java Main
  #+END_SRC

* Types

** Primitive Types

   Primitive types begin with a lowercase letter.

   | Type      | Size   | Example             |
   |-----------+--------+---------------------|
   | ~byte~    | 1 byte | ~byte b = 1;~       |
   | ~short~   | 2 byte | ~short s = 2;~      |
   | ~int~     | 4 byte | ~int i = 3;~        |
   | ~long~    | 8 byte | ~long l = 4L;~      |
   | ~float~   | 4 byte | ~float f = 5.6f;~   |
   | ~double~  | 8 byte | ~double d = 7.8;~   |
   | ~char~    | 2 byte | ~char c = 'c';~     |
   | ~boolean~ | 1 bit  | ~boolean b = true;~ |

   Note that ~String~ is sometimes considered a primitive type.

** Arrays

   #+BEGIN_SRC java
     // Array of size 10.
     int[] array = new int[10];

     // Arrays can also be declared literally.
     String[] numbers = {"One", "Two", "Three"};
   #+END_SRC

** Custom Types

   #+BEGIN_SRC java
     public interface Animal {
         public void speak();
         public void setPosition(int x, int y);
     }

     public class Dog implements Animal {

         private String name;

         private int x;

         private int y;

         public Dog(String name) {
             this.name = name;
             this.x = 0;
             this.y = 0;
         }

         public String getName() {
             return this.name;
         }

         @Override
         public void speak() {
             System.out.println("Bark!");
         }

         @Override
         public void setPosition(int x, int y) {
             this.x = x;
             this.y = y;
         }
     }
   #+END_SRC

* Control Flow

  If statements are c-like.

  #+BEGIN_SRC java
    if (test) {
        // Ran if test is true.
    } else {
        // Ran if test is false.
    }
  #+END_SRC

  Java has standard for loops. ~for...each~ provides iteration over 'Iterable'
  types.

  #+BEGIN_SRC java
    for (int i = 0; i < 10; i++) { }

    for (String item: items) { }
  #+END_SRC

  Java also has ~while~ and ~do...while~ loops.

* Standard Library

** ArrayList

   [[https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html][ArrayList]] implements the [[https://docs.oracle.com/javase/8/docs/api/java/util/List.html][List]] interface.

   #+BEGIN_SRC java
     import java.util.ArrayList;

     ArrayList<Integer> items = new ArrayList<>();

     items.add(1);
     items.add(2);
     items.get(0); // 1
     items.size(); // 2

     for (int item : items) {
         System.out.println(item);
     }
   #+END_SRC

** HashMap

   [[https://docs.oracle.com/javase/8/docs/api/java/util/HashMap.html][HashMap]] implements the [[https://docs.oracle.com/javase/8/docs/api/java/util/Map.html][Map]] interface.

   #+BEGIN_SRC java
     import java.util.HashMap;

     HashMap<String, Integer> map = new HashMap<>();

     map.put("One", 1);
     map.put("Two", 2);
     map.size();             // 2
     map.containsKey("One"); // true
   #+END_SRC

** HashSet

   [[https://docs.oracle.com/javase/8/docs/api/java/util/HashSet.html][HashSet]] implements the [[https://docs.oracle.com/javase/8/docs/api/java/util/Set.html][Set]] interface.

   #+BEGIN_SRC java
     import java.util.HashSet;

     HashSet<Integer> set = new HashSet<>;

     set.add(1);
     set.add(2);

     set.size();      // 2
     set.contains(1); // true
   #+END_SRC

** Random

   #+BEGIN_SRC java
     int number = (int)(Math.random() * 10) // Number between 0 and 10
   #+END_SRC

   [[https://docs.oracle.com/javase/8/docs/api/java/util/Random.html][Random]] gives another approach.

   #+BEGIN_SRC java
     import java.util.Random;

     Random rand = new Random();
     rand.nextInt(10); // Number between 0 and 9.
   #+END_SRC

** Sorting

   #+BEGIN_SRC java
     import java.util.Arrays;
     import java.util.Collections;

     // Array
     int[] array = new int {4, 3, 2, 4, 1};
     Arrays.sort(array);

     // List
     List<Integer> = List.of(4, 3, 2, 4, 1);
     Collections.sort(array);
   #+END_SRC
